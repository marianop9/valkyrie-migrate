// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const getMigrations = `-- name: GetMigrations :many
SELECT mg.id,
    mg.name,
    count(m.migration_group_id) "migrationCount"
FROM migration_group mg	
    LEFT JOIN migration m on mg.id = m.migration_group_id
GROUP BY mg.id, mg.name
`

type GetMigrationsRow struct {
	ID             int32
	Name           string
	MigrationCount int64
}

func (q *Queries) GetMigrations(ctx context.Context) ([]GetMigrationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMigrationsRow
	for rows.Next() {
		var i GetMigrationsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.MigrationCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMigrationsByGroup = `-- name: GetMigrationsByGroup :many
SELECT m.name,
    mg.name AS groupName
FROM migration m
    JOIN migration_group mg on mg.id = m.migration_group_id
WHERE m.migration_group_id = $1
`

type GetMigrationsByGroupRow struct {
	Name      string
	Groupname string
}

func (q *Queries) GetMigrationsByGroup(ctx context.Context, id int32) ([]GetMigrationsByGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getMigrationsByGroup, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMigrationsByGroupRow
	for rows.Next() {
		var i GetMigrationsByGroupRow
		if err := rows.Scan(&i.Name, &i.Groupname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logMigration = `-- name: LogMigration :exec
INSERT INTO migration (
    migration_group_id,
    name,
    executed_at
) VALUES ($1, $2, $3)
`

type LogMigrationParams struct {
	MigrationGroupID int32
	Name             string
	ExecutedAt       time.Time
}

func (q *Queries) LogMigration(ctx context.Context, arg LogMigrationParams) error {
	_, err := q.db.ExecContext(ctx, logMigration, arg.MigrationGroupID, arg.Name, arg.ExecutedAt)
	return err
}

const logMigrationGroup = `-- name: LogMigrationGroup :execresult
INSERT INTO migration_group (
    name
) VALUES (
    $1
)
RETURNING id
`

func (q *Queries) LogMigrationGroup(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, logMigrationGroup, name)
}
